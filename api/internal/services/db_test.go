// Code generated by MockGen. DO NOT EDIT.
// Source: ../db/interface.go

// Package services is a generated GoMock package.
package services

import (
	db "api/internal/db"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdbQueries is a mock of dbQueries interface.
type MockdbQueries struct {
	ctrl     *gomock.Controller
	recorder *MockdbQueriesMockRecorder
}

// MockdbQueriesMockRecorder is the mock recorder for MockdbQueries.
type MockdbQueriesMockRecorder struct {
	mock *MockdbQueries
}

// NewMockdbQueries creates a new mock instance.
func NewMockdbQueries(ctrl *gomock.Controller) *MockdbQueries {
	mock := &MockdbQueries{ctrl: ctrl}
	mock.recorder = &MockdbQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbQueries) EXPECT() *MockdbQueriesMockRecorder {
	return m.recorder
}

// WithTx mocks base method.
func (m *MockdbQueries) WithTx(tx *sql.Tx) *db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*db.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockdbQueriesMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockdbQueries)(nil).WithTx), tx)
}

// MockAuthorQueries is a mock of AuthorQueries interface.
type MockAuthorQueries struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorQueriesMockRecorder
}

// MockAuthorQueriesMockRecorder is the mock recorder for MockAuthorQueries.
type MockAuthorQueriesMockRecorder struct {
	mock *MockAuthorQueries
}

// NewMockAuthorQueries creates a new mock instance.
func NewMockAuthorQueries(ctrl *gomock.Controller) *MockAuthorQueries {
	mock := &MockAuthorQueries{ctrl: ctrl}
	mock.recorder = &MockAuthorQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorQueries) EXPECT() *MockAuthorQueriesMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAuthorQueries) CreateAuthor(ctx context.Context, arg db.CreateAuthorParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorQueriesMockRecorder) CreateAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthorQueries)(nil).CreateAuthor), ctx, arg)
}

// DeleteAuthor mocks base method.
func (m *MockAuthorQueries) DeleteAuthor(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorQueriesMockRecorder) DeleteAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorQueries)(nil).DeleteAuthor), ctx, id)
}

// GetAllAuthors mocks base method.
func (m *MockAuthorQueries) GetAllAuthors(ctx context.Context, arg db.GetAllAuthorsParams) ([]db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthors", ctx, arg)
	ret0, _ := ret[0].([]db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthors indicates an expected call of GetAllAuthors.
func (mr *MockAuthorQueriesMockRecorder) GetAllAuthors(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthors", reflect.TypeOf((*MockAuthorQueries)(nil).GetAllAuthors), ctx, arg)
}

// GetAllAuthorsWithName mocks base method.
func (m *MockAuthorQueries) GetAllAuthorsWithName(ctx context.Context, lastName string) ([]db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthorsWithName", ctx, lastName)
	ret0, _ := ret[0].([]db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthorsWithName indicates an expected call of GetAllAuthorsWithName.
func (mr *MockAuthorQueriesMockRecorder) GetAllAuthorsWithName(ctx, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthorsWithName", reflect.TypeOf((*MockAuthorQueries)(nil).GetAllAuthorsWithName), ctx, lastName)
}

// GetAuthorById mocks base method.
func (m *MockAuthorQueries) GetAuthorById(ctx context.Context, id int64) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorById", ctx, id)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorById indicates an expected call of GetAuthorById.
func (mr *MockAuthorQueriesMockRecorder) GetAuthorById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorById", reflect.TypeOf((*MockAuthorQueries)(nil).GetAuthorById), ctx, id)
}

// GetUniqueAuthor mocks base method.
func (m *MockAuthorQueries) GetUniqueAuthor(ctx context.Context, arg db.GetUniqueAuthorParams) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqueAuthor", ctx, arg)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniqueAuthor indicates an expected call of GetUniqueAuthor.
func (mr *MockAuthorQueriesMockRecorder) GetUniqueAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqueAuthor", reflect.TypeOf((*MockAuthorQueries)(nil).GetUniqueAuthor), ctx, arg)
}

// UpdateAuthor mocks base method.
func (m *MockAuthorQueries) UpdateAuthor(ctx context.Context, arg db.UpdateAuthorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAuthorQueriesMockRecorder) UpdateAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAuthorQueries)(nil).UpdateAuthor), ctx, arg)
}

// WithTx mocks base method.
func (m *MockAuthorQueries) WithTx(tx *sql.Tx) *db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*db.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockAuthorQueriesMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockAuthorQueries)(nil).WithTx), tx)
}

// MockAllQueries is a mock of AllQueries interface.
type MockAllQueries struct {
	ctrl     *gomock.Controller
	recorder *MockAllQueriesMockRecorder
}

// MockAllQueriesMockRecorder is the mock recorder for MockAllQueries.
type MockAllQueriesMockRecorder struct {
	mock *MockAllQueries
}

// NewMockAllQueries creates a new mock instance.
func NewMockAllQueries(ctrl *gomock.Controller) *MockAllQueries {
	mock := &MockAllQueries{ctrl: ctrl}
	mock.recorder = &MockAllQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllQueries) EXPECT() *MockAllQueriesMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAllQueries) CreateAuthor(ctx context.Context, arg db.CreateAuthorParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAllQueriesMockRecorder) CreateAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAllQueries)(nil).CreateAuthor), ctx, arg)
}

// DeleteAuthor mocks base method.
func (m *MockAllQueries) DeleteAuthor(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAllQueriesMockRecorder) DeleteAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAllQueries)(nil).DeleteAuthor), ctx, id)
}

// GetAllAuthors mocks base method.
func (m *MockAllQueries) GetAllAuthors(ctx context.Context, arg db.GetAllAuthorsParams) ([]db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthors", ctx, arg)
	ret0, _ := ret[0].([]db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthors indicates an expected call of GetAllAuthors.
func (mr *MockAllQueriesMockRecorder) GetAllAuthors(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthors", reflect.TypeOf((*MockAllQueries)(nil).GetAllAuthors), ctx, arg)
}

// GetAllAuthorsWithName mocks base method.
func (m *MockAllQueries) GetAllAuthorsWithName(ctx context.Context, lastName string) ([]db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthorsWithName", ctx, lastName)
	ret0, _ := ret[0].([]db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthorsWithName indicates an expected call of GetAllAuthorsWithName.
func (mr *MockAllQueriesMockRecorder) GetAllAuthorsWithName(ctx, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthorsWithName", reflect.TypeOf((*MockAllQueries)(nil).GetAllAuthorsWithName), ctx, lastName)
}

// GetAuthorById mocks base method.
func (m *MockAllQueries) GetAuthorById(ctx context.Context, id int64) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorById", ctx, id)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorById indicates an expected call of GetAuthorById.
func (mr *MockAllQueriesMockRecorder) GetAuthorById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorById", reflect.TypeOf((*MockAllQueries)(nil).GetAuthorById), ctx, id)
}

// GetUniqueAuthor mocks base method.
func (m *MockAllQueries) GetUniqueAuthor(ctx context.Context, arg db.GetUniqueAuthorParams) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqueAuthor", ctx, arg)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniqueAuthor indicates an expected call of GetUniqueAuthor.
func (mr *MockAllQueriesMockRecorder) GetUniqueAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqueAuthor", reflect.TypeOf((*MockAllQueries)(nil).GetUniqueAuthor), ctx, arg)
}

// UpdateAuthor mocks base method.
func (m *MockAllQueries) UpdateAuthor(ctx context.Context, arg db.UpdateAuthorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAllQueriesMockRecorder) UpdateAuthor(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAllQueries)(nil).UpdateAuthor), ctx, arg)
}

// WithTx mocks base method.
func (m *MockAllQueries) WithTx(tx *sql.Tx) *db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*db.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockAllQueriesMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockAllQueries)(nil).WithTx), tx)
}
